{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["soundBank","keyCode","keyTrigger","id","url","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","soundToDisplay","displayKeyDown","bind","assertThisInitialized","updateDisplay","document","addEventListener","script","createElement","src","async","type","body","appendChild","console","log","e","_this2","forEach","sound","key","toUpperCase","setState","name","_this3","react_default","a","onKeyPress","handleKey","map","App_DrumPad","update","keyId","source","Component","DrumPad","_this4","handleKeyDown","handleClick","getElementById","play","keyPressed","className","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5971d317.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst soundBank = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Chord-1.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Chord-2.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Chord-3.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Shaker.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Open-HH.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Closed-HH.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: 'Punchy-Kick.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Side-Stick.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Snare.',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      soundToDisplay: 'Play the keys..'\n    }\n    this.displayKeyDown = this.displayKeyDown.bind(this);\n    this.updateDisplay = this.updateDisplay.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\",this.displayKeyDown);\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n    script.async = true;\n    script.type = 'text/javascript'\n    document.body.appendChild(script);\n    console.log(script);\n  }\n\n  displayKeyDown(e) {\n    soundBank.forEach(sound => {\n      if (sound.keyTrigger === e.key.toUpperCase()) {\n        this.setState({\n          soundToDisplay: sound.id\n        })\n      }\n    })\n  }\n  updateDisplay(name) {\n    this.setState({\n      soundToDisplay: name\n    })\n  }\n  render() {\n    return (\n      <div id=\"drum-machine\" onKeyPress={this.handleKey}>\n        <div id=\"display\">{this.state.soundToDisplay}</div>\n        <div id=\"drum-pads\">\n          {soundBank.map(sound => {\n            console.log(sound);\n            return <DrumPad update={this.updateDisplay} name={sound.id} keyId={sound.keyTrigger} source={sound.url} key={sound.keyCode}/>\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    document.getElementById(this.props.keyId).play();\n    this.props.update(this.props.name);\n  }\n  handleKeyDown(e) {\n    console.log(e);\n    let keyPressed = e.key.toUpperCase();\n    if (keyPressed === this.props.keyId) {\n      document.getElementById(keyPressed).play();\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\",this.handleKeyDown);\n  }\n  render() {\n    return (\n    <button id={this.props.name} className=\"drum-pad\" onClick={this.handleClick}>\n      {this.props.keyId}\n      <audio id={this.props.keyId} className=\"clip\" src={this.props.source}/>\n    </button>\n  )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}